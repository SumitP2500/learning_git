--------------------------------------------------------
[[Git Basic]]
---------------------------------------------------------

To clone I have used following command
- git clone https://github.com/SumitP2500/learning_git.git
[It will create learning_git repo on local machine]

- git clone https://github.com/SumitP2500/learning_git.git lear_git2
[It will create git repo as lear_git2]

-----------------------------------------------------

*Your Identity*
Note: Yet, this portion is not worked.
To set username for this repo
- git config user.name "sumit2500"

To set username globally
- git config --global user.name "sumit2500"

To confrm username
- git config user.name
- git config --global user.name

Checking all settings
- git config --list
---------------------------------------------------
Getting help

git help <verb>
git <verb> --help

----------------------------------------------------
to see status of git repo
- git status

short status
- git status -s

-------------------------------------------------------
To create file
- vi simple.html

To add this file remotely on git
- git status
- git add simple.html
- git commit -m "Added simple.html"
- git pull origin master
- git push origin master

----------------------------------------------------
To delete branch from local
- git branch -d <BranchName>
- git branch -D <BranchName>

To delete branch from remote
- git push origin :<BranchName>
- git push origin --delete <BranchName
-------------------------------------------------------
TO view staged and unstaged changes
- git diff
[it shows you the exact line added and removed]

To view what you have staged [two synonym commands]
- git diff --staged
- git diff --cached

--------------------------------------------------------
To remove files from git repo/ staged area
way 1:
     rm file_name
     git add .
     git commit
way 2:
     git rm file_name (It will remove adding staging area)
     git commit

To remove files form staged area
- git rm --cached file_name
[It will remove file from staged area(after add command) but it remains in working tree]

we can use file-glob patterns
git rm --cached hi\*.txt

-----------------------------------------------------------

To move/rename files
-git mv file_name file_name1

this is equivalent to running something like this:
- mv file_name file_name1
- git rm file_name
- git add file_name1

-----------------------------------------------------------

To view commit history
- git log

- git log -p -2
[p - show path with each commit]

git log --pretty=format:"%h - %an, %cn, %ar, %s"
[  h - abbreviated commit hash
an - author name
ae - author email
ar - author date, relative
cn - commitor name
s - subject
]

git log --pretty="%h - %s" --author=sumit --since="2010-10-15"

-----------------------------------------------------------

To Undo the things
- git commit --amend
[This command useful when you forget to add something or mess commit message.]
[This command takes your staging area and uses it for commit.]

To Unstage Staged file
- git reset HEAD <file_name>
[git reset can be dangerous if it use it with --hard]

To unmodify the modified file
- git checkout -- <filename>
[It revert file back to what it looked like when last commit.]

-----------------------------------------------------------
TO undo the commits
- git reset --soft <commit_id>
- git reset HEAD <commit>
- git reset HEAD~

-----------------------------------------------------------

To work with remote
[remote config info store in /.git/config file.]
- git remote
- git remote -v
- git remote add origin2 <url>
- git remote rename origin origin1
- git remote rm origin2
To modify/change current origin url
- git remote set-url orign <url>
----------------------------------------------------------

Try to add tag as an imp deliverable of code

-----------------------------------------------------------
Trying to merge branch on and solve conflicts
t merge branch_name


-----------------------------------------------------------